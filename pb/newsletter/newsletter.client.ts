// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "newsletter/newsletter.proto" (package "newsletter", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { NewsletterService } from "./newsletter";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { SubcribeNewsletterResponse } from "./newsletter";
import type { SubcribeNewsletterRequest } from "./newsletter";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service newsletter.NewsletterService
 */
export interface INewsletterServiceClient {
    /**
     * @generated from protobuf rpc: SubscribeNewsletter(newsletter.SubcribeNewsletterRequest) returns (newsletter.SubcribeNewsletterResponse);
     */
    subscribeNewsletter(input: SubcribeNewsletterRequest, options?: RpcOptions): UnaryCall<SubcribeNewsletterRequest, SubcribeNewsletterResponse>;
}
/**
 * @generated from protobuf service newsletter.NewsletterService
 */
export class NewsletterServiceClient implements INewsletterServiceClient, ServiceInfo {
    typeName = NewsletterService.typeName;
    methods = NewsletterService.methods;
    options = NewsletterService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: SubscribeNewsletter(newsletter.SubcribeNewsletterRequest) returns (newsletter.SubcribeNewsletterResponse);
     */
    subscribeNewsletter(input: SubcribeNewsletterRequest, options?: RpcOptions): UnaryCall<SubcribeNewsletterRequest, SubcribeNewsletterResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubcribeNewsletterRequest, SubcribeNewsletterResponse>("unary", this._transport, method, opt, input);
    }
}
