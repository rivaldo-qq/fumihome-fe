// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "newsletter/newsletter.proto" (package "newsletter", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { BaseResponse } from "../common/base_response";
/**
 * @generated from protobuf message newsletter.SubcribeNewsletterRequest
 */
export interface SubcribeNewsletterRequest {
    /**
     * @generated from protobuf field: string email = 1;
     */
    email: string;
    /**
     * @generated from protobuf field: string full_name = 2;
     */
    fullName: string;
}
/**
 * @generated from protobuf message newsletter.SubcribeNewsletterResponse
 */
export interface SubcribeNewsletterResponse {
    /**
     * @generated from protobuf field: common.BaseResponse base = 1;
     */
    base?: BaseResponse;
}
// @generated message type with reflection information, may provide speed optimized methods
class SubcribeNewsletterRequest$Type extends MessageType<SubcribeNewsletterRequest> {
    constructor() {
        super("newsletter.SubcribeNewsletterRequest", [
            { no: 1, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { minLen: "1", maxLen: "255", email: true } } } },
            { no: 2, name: "full_name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { minLen: "1", maxLen: "255" } } } }
        ]);
    }
    create(value?: PartialMessage<SubcribeNewsletterRequest>): SubcribeNewsletterRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.email = "";
        message.fullName = "";
        if (value !== undefined)
            reflectionMergePartial<SubcribeNewsletterRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubcribeNewsletterRequest): SubcribeNewsletterRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string email */ 1:
                    message.email = reader.string();
                    break;
                case /* string full_name */ 2:
                    message.fullName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubcribeNewsletterRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string email = 1; */
        if (message.email !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.email);
        /* string full_name = 2; */
        if (message.fullName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.fullName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message newsletter.SubcribeNewsletterRequest
 */
export const SubcribeNewsletterRequest = new SubcribeNewsletterRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubcribeNewsletterResponse$Type extends MessageType<SubcribeNewsletterResponse> {
    constructor() {
        super("newsletter.SubcribeNewsletterResponse", [
            { no: 1, name: "base", kind: "message", T: () => BaseResponse }
        ]);
    }
    create(value?: PartialMessage<SubcribeNewsletterResponse>): SubcribeNewsletterResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubcribeNewsletterResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubcribeNewsletterResponse): SubcribeNewsletterResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.BaseResponse base */ 1:
                    message.base = BaseResponse.internalBinaryRead(reader, reader.uint32(), options, message.base);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubcribeNewsletterResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.BaseResponse base = 1; */
        if (message.base)
            BaseResponse.internalBinaryWrite(message.base, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message newsletter.SubcribeNewsletterResponse
 */
export const SubcribeNewsletterResponse = new SubcribeNewsletterResponse$Type();
/**
 * @generated ServiceType for protobuf service newsletter.NewsletterService
 */
export const NewsletterService = new ServiceType("newsletter.NewsletterService", [
    { name: "SubscribeNewsletter", options: {}, I: SubcribeNewsletterRequest, O: SubcribeNewsletterResponse }
]);
