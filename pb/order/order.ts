// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "order/order.proto" (package "order", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { PaginationResponse } from "../common/pagination";
import { Timestamp } from "../google/protobuf/timestamp";
import { PaginationRequest } from "../common/pagination";
import { BaseResponse } from "../common/base_response";
/**
 * @generated from protobuf message order.CreateOrderRequestProductItem
 */
export interface CreateOrderRequestProductItem {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: int64 quantity = 2;
     */
    quantity: bigint;
}
/**
 * @generated from protobuf message order.CreateOrderRequest
 */
export interface CreateOrderRequest {
    /**
     * @generated from protobuf field: string full_name = 1;
     */
    fullName: string;
    /**
     * @generated from protobuf field: string address = 2;
     */
    address: string;
    /**
     * @generated from protobuf field: string phone_number = 3;
     */
    phoneNumber: string;
    /**
     * @generated from protobuf field: string notes = 4;
     */
    notes: string;
    /**
     * @generated from protobuf field: repeated order.CreateOrderRequestProductItem products = 5;
     */
    products: CreateOrderRequestProductItem[];
}
/**
 * @generated from protobuf message order.CreateOrderResponse
 */
export interface CreateOrderResponse {
    /**
     * @generated from protobuf field: common.BaseResponse base = 1;
     */
    base?: BaseResponse;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
}
/**
 * List Order Admin
 *
 * @generated from protobuf message order.ListOrderAdminRequest
 */
export interface ListOrderAdminRequest {
    /**
     * @generated from protobuf field: common.PaginationRequest pagination = 1;
     */
    pagination?: PaginationRequest;
}
/**
 * @generated from protobuf message order.ListOrderAdminResponseItemProduct
 */
export interface ListOrderAdminResponseItemProduct {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: double price = 3;
     */
    price: number;
    /**
     * @generated from protobuf field: int64 quantity = 4;
     */
    quantity: bigint;
}
/**
 * @generated from protobuf message order.ListOrderAdminResponseItem
 */
export interface ListOrderAdminResponseItem {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string number = 2;
     */
    number: string;
    /**
     * @generated from protobuf field: string customer = 3;
     */
    customer: string;
    /**
     * @generated from protobuf field: string status_code = 4;
     */
    statusCode: string;
    /**
     * @generated from protobuf field: double total = 5;
     */
    total: number;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 6;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: repeated order.ListOrderAdminResponseItemProduct products = 7;
     */
    products: ListOrderAdminResponseItemProduct[];
}
/**
 * @generated from protobuf message order.ListOrderAdminResponse
 */
export interface ListOrderAdminResponse {
    /**
     * @generated from protobuf field: common.BaseResponse base = 1;
     */
    base?: BaseResponse;
    /**
     * @generated from protobuf field: common.PaginationResponse pagination = 2;
     */
    pagination?: PaginationResponse;
    /**
     * @generated from protobuf field: repeated order.ListOrderAdminResponseItem items = 3;
     */
    items: ListOrderAdminResponseItem[];
}
/**
 * List Order
 *
 * @generated from protobuf message order.ListOrderRequest
 */
export interface ListOrderRequest {
    /**
     * @generated from protobuf field: common.PaginationRequest pagination = 1;
     */
    pagination?: PaginationRequest;
}
/**
 * @generated from protobuf message order.ListOrderResponseItemProduct
 */
export interface ListOrderResponseItemProduct {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: double price = 3;
     */
    price: number;
    /**
     * @generated from protobuf field: int64 quantity = 4;
     */
    quantity: bigint;
}
/**
 * @generated from protobuf message order.ListOrderResponseItem
 */
export interface ListOrderResponseItem {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string number = 2;
     */
    number: string;
    /**
     * @generated from protobuf field: string customer = 3;
     */
    customer: string;
    /**
     * @generated from protobuf field: string status_code = 4;
     */
    statusCode: string;
    /**
     * @generated from protobuf field: double total = 5;
     */
    total: number;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 6;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: repeated order.ListOrderResponseItemProduct products = 7;
     */
    products: ListOrderResponseItemProduct[];
    /**
     * @generated from protobuf field: string xendit_invoice_url = 8;
     */
    xenditInvoiceUrl: string;
}
/**
 * @generated from protobuf message order.ListOrderResponse
 */
export interface ListOrderResponse {
    /**
     * @generated from protobuf field: common.BaseResponse base = 1;
     */
    base?: BaseResponse;
    /**
     * @generated from protobuf field: common.PaginationResponse pagination = 2;
     */
    pagination?: PaginationResponse;
    /**
     * @generated from protobuf field: repeated order.ListOrderResponseItem items = 3;
     */
    items: ListOrderResponseItem[];
}
/**
 * @generated from protobuf message order.DetailOrderRequest
 */
export interface DetailOrderRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message order.DetailOrderResponseItem
 */
export interface DetailOrderResponseItem {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: double price = 3;
     */
    price: number;
    /**
     * @generated from protobuf field: int64 quantity = 4;
     */
    quantity: bigint;
}
/**
 * @generated from protobuf message order.DetailOrderResponse
 */
export interface DetailOrderResponse {
    /**
     * @generated from protobuf field: common.BaseResponse base = 1;
     */
    base?: BaseResponse;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * @generated from protobuf field: string number = 3;
     */
    number: string;
    /**
     * @generated from protobuf field: string user_full_name = 4;
     */
    userFullName: string;
    /**
     * @generated from protobuf field: string address = 5;
     */
    address: string;
    /**
     * @generated from protobuf field: string phone_number = 6;
     */
    phoneNumber: string;
    /**
     * @generated from protobuf field: string notes = 7;
     */
    notes: string;
    /**
     * @generated from protobuf field: string order_status_code = 8;
     */
    orderStatusCode: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 9;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: string xendit_invoice_url = 10;
     */
    xenditInvoiceUrl: string;
    /**
     * @generated from protobuf field: repeated order.DetailOrderResponseItem items = 11;
     */
    items: DetailOrderResponseItem[];
    /**
     * @generated from protobuf field: double total = 12;
     */
    total: number;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp expired_at = 13;
     */
    expiredAt?: Timestamp;
}
/**
 * @generated from protobuf message order.UpdateOrderStatusRequest
 */
export interface UpdateOrderStatusRequest {
    /**
     * @generated from protobuf field: string order_id = 1;
     */
    orderId: string;
    /**
     * @generated from protobuf field: string new_status_code = 2;
     */
    newStatusCode: string;
}
/**
 * @generated from protobuf message order.UpdateOrderStatusResponse
 */
export interface UpdateOrderStatusResponse {
    /**
     * @generated from protobuf field: common.BaseResponse base = 1;
     */
    base?: BaseResponse;
}
// @generated message type with reflection information, may provide speed optimized methods
class CreateOrderRequestProductItem$Type extends MessageType<CreateOrderRequestProductItem> {
    constructor() {
        super("order.CreateOrderRequestProductItem", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "quantity", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CreateOrderRequestProductItem>): CreateOrderRequestProductItem {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.quantity = 0n;
        if (value !== undefined)
            reflectionMergePartial<CreateOrderRequestProductItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateOrderRequestProductItem): CreateOrderRequestProductItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* int64 quantity */ 2:
                    message.quantity = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateOrderRequestProductItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* int64 quantity = 2; */
        if (message.quantity !== 0n)
            writer.tag(2, WireType.Varint).int64(message.quantity);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message order.CreateOrderRequestProductItem
 */
export const CreateOrderRequestProductItem = new CreateOrderRequestProductItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateOrderRequest$Type extends MessageType<CreateOrderRequest> {
    constructor() {
        super("order.CreateOrderRequest", [
            { no: 1, name: "full_name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { minLen: "1", maxLen: "255" } } } },
            { no: 2, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { minLen: "1", maxLen: "255" } } } },
            { no: 3, name: "phone_number", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { minLen: "1", maxLen: "255" } } } },
            { no: 4, name: "notes", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "255" } } } },
            { no: 5, name: "products", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CreateOrderRequestProductItem }
        ]);
    }
    create(value?: PartialMessage<CreateOrderRequest>): CreateOrderRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fullName = "";
        message.address = "";
        message.phoneNumber = "";
        message.notes = "";
        message.products = [];
        if (value !== undefined)
            reflectionMergePartial<CreateOrderRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateOrderRequest): CreateOrderRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string full_name */ 1:
                    message.fullName = reader.string();
                    break;
                case /* string address */ 2:
                    message.address = reader.string();
                    break;
                case /* string phone_number */ 3:
                    message.phoneNumber = reader.string();
                    break;
                case /* string notes */ 4:
                    message.notes = reader.string();
                    break;
                case /* repeated order.CreateOrderRequestProductItem products */ 5:
                    message.products.push(CreateOrderRequestProductItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateOrderRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string full_name = 1; */
        if (message.fullName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.fullName);
        /* string address = 2; */
        if (message.address !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.address);
        /* string phone_number = 3; */
        if (message.phoneNumber !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.phoneNumber);
        /* string notes = 4; */
        if (message.notes !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.notes);
        /* repeated order.CreateOrderRequestProductItem products = 5; */
        for (let i = 0; i < message.products.length; i++)
            CreateOrderRequestProductItem.internalBinaryWrite(message.products[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message order.CreateOrderRequest
 */
export const CreateOrderRequest = new CreateOrderRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateOrderResponse$Type extends MessageType<CreateOrderResponse> {
    constructor() {
        super("order.CreateOrderResponse", [
            { no: 1, name: "base", kind: "message", T: () => BaseResponse },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateOrderResponse>): CreateOrderResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<CreateOrderResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateOrderResponse): CreateOrderResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.BaseResponse base */ 1:
                    message.base = BaseResponse.internalBinaryRead(reader, reader.uint32(), options, message.base);
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateOrderResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.BaseResponse base = 1; */
        if (message.base)
            BaseResponse.internalBinaryWrite(message.base, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message order.CreateOrderResponse
 */
export const CreateOrderResponse = new CreateOrderResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListOrderAdminRequest$Type extends MessageType<ListOrderAdminRequest> {
    constructor() {
        super("order.ListOrderAdminRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationRequest }
        ]);
    }
    create(value?: PartialMessage<ListOrderAdminRequest>): ListOrderAdminRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListOrderAdminRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListOrderAdminRequest): ListOrderAdminRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.PaginationRequest pagination */ 1:
                    message.pagination = PaginationRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListOrderAdminRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.PaginationRequest pagination = 1; */
        if (message.pagination)
            PaginationRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message order.ListOrderAdminRequest
 */
export const ListOrderAdminRequest = new ListOrderAdminRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListOrderAdminResponseItemProduct$Type extends MessageType<ListOrderAdminResponseItemProduct> {
    constructor() {
        super("order.ListOrderAdminResponseItemProduct", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "price", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "quantity", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ListOrderAdminResponseItemProduct>): ListOrderAdminResponseItemProduct {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.price = 0;
        message.quantity = 0n;
        if (value !== undefined)
            reflectionMergePartial<ListOrderAdminResponseItemProduct>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListOrderAdminResponseItemProduct): ListOrderAdminResponseItemProduct {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* double price */ 3:
                    message.price = reader.double();
                    break;
                case /* int64 quantity */ 4:
                    message.quantity = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListOrderAdminResponseItemProduct, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* double price = 3; */
        if (message.price !== 0)
            writer.tag(3, WireType.Bit64).double(message.price);
        /* int64 quantity = 4; */
        if (message.quantity !== 0n)
            writer.tag(4, WireType.Varint).int64(message.quantity);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message order.ListOrderAdminResponseItemProduct
 */
export const ListOrderAdminResponseItemProduct = new ListOrderAdminResponseItemProduct$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListOrderAdminResponseItem$Type extends MessageType<ListOrderAdminResponseItem> {
    constructor() {
        super("order.ListOrderAdminResponseItem", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "customer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "status_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "total", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 7, name: "products", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ListOrderAdminResponseItemProduct }
        ]);
    }
    create(value?: PartialMessage<ListOrderAdminResponseItem>): ListOrderAdminResponseItem {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.number = "";
        message.customer = "";
        message.statusCode = "";
        message.total = 0;
        message.products = [];
        if (value !== undefined)
            reflectionMergePartial<ListOrderAdminResponseItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListOrderAdminResponseItem): ListOrderAdminResponseItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string number */ 2:
                    message.number = reader.string();
                    break;
                case /* string customer */ 3:
                    message.customer = reader.string();
                    break;
                case /* string status_code */ 4:
                    message.statusCode = reader.string();
                    break;
                case /* double total */ 5:
                    message.total = reader.double();
                    break;
                case /* google.protobuf.Timestamp created_at */ 6:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* repeated order.ListOrderAdminResponseItemProduct products */ 7:
                    message.products.push(ListOrderAdminResponseItemProduct.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListOrderAdminResponseItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string number = 2; */
        if (message.number !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.number);
        /* string customer = 3; */
        if (message.customer !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.customer);
        /* string status_code = 4; */
        if (message.statusCode !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.statusCode);
        /* double total = 5; */
        if (message.total !== 0)
            writer.tag(5, WireType.Bit64).double(message.total);
        /* google.protobuf.Timestamp created_at = 6; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated order.ListOrderAdminResponseItemProduct products = 7; */
        for (let i = 0; i < message.products.length; i++)
            ListOrderAdminResponseItemProduct.internalBinaryWrite(message.products[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message order.ListOrderAdminResponseItem
 */
export const ListOrderAdminResponseItem = new ListOrderAdminResponseItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListOrderAdminResponse$Type extends MessageType<ListOrderAdminResponse> {
    constructor() {
        super("order.ListOrderAdminResponse", [
            { no: 1, name: "base", kind: "message", T: () => BaseResponse },
            { no: 2, name: "pagination", kind: "message", T: () => PaginationResponse },
            { no: 3, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ListOrderAdminResponseItem }
        ]);
    }
    create(value?: PartialMessage<ListOrderAdminResponse>): ListOrderAdminResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.items = [];
        if (value !== undefined)
            reflectionMergePartial<ListOrderAdminResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListOrderAdminResponse): ListOrderAdminResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.BaseResponse base */ 1:
                    message.base = BaseResponse.internalBinaryRead(reader, reader.uint32(), options, message.base);
                    break;
                case /* common.PaginationResponse pagination */ 2:
                    message.pagination = PaginationResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* repeated order.ListOrderAdminResponseItem items */ 3:
                    message.items.push(ListOrderAdminResponseItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListOrderAdminResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.BaseResponse base = 1; */
        if (message.base)
            BaseResponse.internalBinaryWrite(message.base, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* common.PaginationResponse pagination = 2; */
        if (message.pagination)
            PaginationResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated order.ListOrderAdminResponseItem items = 3; */
        for (let i = 0; i < message.items.length; i++)
            ListOrderAdminResponseItem.internalBinaryWrite(message.items[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message order.ListOrderAdminResponse
 */
export const ListOrderAdminResponse = new ListOrderAdminResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListOrderRequest$Type extends MessageType<ListOrderRequest> {
    constructor() {
        super("order.ListOrderRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationRequest }
        ]);
    }
    create(value?: PartialMessage<ListOrderRequest>): ListOrderRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListOrderRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListOrderRequest): ListOrderRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.PaginationRequest pagination */ 1:
                    message.pagination = PaginationRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListOrderRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.PaginationRequest pagination = 1; */
        if (message.pagination)
            PaginationRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message order.ListOrderRequest
 */
export const ListOrderRequest = new ListOrderRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListOrderResponseItemProduct$Type extends MessageType<ListOrderResponseItemProduct> {
    constructor() {
        super("order.ListOrderResponseItemProduct", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "price", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "quantity", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ListOrderResponseItemProduct>): ListOrderResponseItemProduct {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.price = 0;
        message.quantity = 0n;
        if (value !== undefined)
            reflectionMergePartial<ListOrderResponseItemProduct>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListOrderResponseItemProduct): ListOrderResponseItemProduct {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* double price */ 3:
                    message.price = reader.double();
                    break;
                case /* int64 quantity */ 4:
                    message.quantity = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListOrderResponseItemProduct, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* double price = 3; */
        if (message.price !== 0)
            writer.tag(3, WireType.Bit64).double(message.price);
        /* int64 quantity = 4; */
        if (message.quantity !== 0n)
            writer.tag(4, WireType.Varint).int64(message.quantity);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message order.ListOrderResponseItemProduct
 */
export const ListOrderResponseItemProduct = new ListOrderResponseItemProduct$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListOrderResponseItem$Type extends MessageType<ListOrderResponseItem> {
    constructor() {
        super("order.ListOrderResponseItem", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "customer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "status_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "total", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 7, name: "products", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ListOrderResponseItemProduct },
            { no: 8, name: "xendit_invoice_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListOrderResponseItem>): ListOrderResponseItem {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.number = "";
        message.customer = "";
        message.statusCode = "";
        message.total = 0;
        message.products = [];
        message.xenditInvoiceUrl = "";
        if (value !== undefined)
            reflectionMergePartial<ListOrderResponseItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListOrderResponseItem): ListOrderResponseItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string number */ 2:
                    message.number = reader.string();
                    break;
                case /* string customer */ 3:
                    message.customer = reader.string();
                    break;
                case /* string status_code */ 4:
                    message.statusCode = reader.string();
                    break;
                case /* double total */ 5:
                    message.total = reader.double();
                    break;
                case /* google.protobuf.Timestamp created_at */ 6:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* repeated order.ListOrderResponseItemProduct products */ 7:
                    message.products.push(ListOrderResponseItemProduct.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string xendit_invoice_url */ 8:
                    message.xenditInvoiceUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListOrderResponseItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string number = 2; */
        if (message.number !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.number);
        /* string customer = 3; */
        if (message.customer !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.customer);
        /* string status_code = 4; */
        if (message.statusCode !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.statusCode);
        /* double total = 5; */
        if (message.total !== 0)
            writer.tag(5, WireType.Bit64).double(message.total);
        /* google.protobuf.Timestamp created_at = 6; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated order.ListOrderResponseItemProduct products = 7; */
        for (let i = 0; i < message.products.length; i++)
            ListOrderResponseItemProduct.internalBinaryWrite(message.products[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* string xendit_invoice_url = 8; */
        if (message.xenditInvoiceUrl !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.xenditInvoiceUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message order.ListOrderResponseItem
 */
export const ListOrderResponseItem = new ListOrderResponseItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListOrderResponse$Type extends MessageType<ListOrderResponse> {
    constructor() {
        super("order.ListOrderResponse", [
            { no: 1, name: "base", kind: "message", T: () => BaseResponse },
            { no: 2, name: "pagination", kind: "message", T: () => PaginationResponse },
            { no: 3, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ListOrderResponseItem }
        ]);
    }
    create(value?: PartialMessage<ListOrderResponse>): ListOrderResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.items = [];
        if (value !== undefined)
            reflectionMergePartial<ListOrderResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListOrderResponse): ListOrderResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.BaseResponse base */ 1:
                    message.base = BaseResponse.internalBinaryRead(reader, reader.uint32(), options, message.base);
                    break;
                case /* common.PaginationResponse pagination */ 2:
                    message.pagination = PaginationResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* repeated order.ListOrderResponseItem items */ 3:
                    message.items.push(ListOrderResponseItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListOrderResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.BaseResponse base = 1; */
        if (message.base)
            BaseResponse.internalBinaryWrite(message.base, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* common.PaginationResponse pagination = 2; */
        if (message.pagination)
            PaginationResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated order.ListOrderResponseItem items = 3; */
        for (let i = 0; i < message.items.length; i++)
            ListOrderResponseItem.internalBinaryWrite(message.items[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message order.ListOrderResponse
 */
export const ListOrderResponse = new ListOrderResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DetailOrderRequest$Type extends MessageType<DetailOrderRequest> {
    constructor() {
        super("order.DetailOrderRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { minLen: "1", maxLen: "255" } } } }
        ]);
    }
    create(value?: PartialMessage<DetailOrderRequest>): DetailOrderRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<DetailOrderRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DetailOrderRequest): DetailOrderRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DetailOrderRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message order.DetailOrderRequest
 */
export const DetailOrderRequest = new DetailOrderRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DetailOrderResponseItem$Type extends MessageType<DetailOrderResponseItem> {
    constructor() {
        super("order.DetailOrderResponseItem", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "price", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "quantity", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<DetailOrderResponseItem>): DetailOrderResponseItem {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.price = 0;
        message.quantity = 0n;
        if (value !== undefined)
            reflectionMergePartial<DetailOrderResponseItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DetailOrderResponseItem): DetailOrderResponseItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* double price */ 3:
                    message.price = reader.double();
                    break;
                case /* int64 quantity */ 4:
                    message.quantity = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DetailOrderResponseItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* double price = 3; */
        if (message.price !== 0)
            writer.tag(3, WireType.Bit64).double(message.price);
        /* int64 quantity = 4; */
        if (message.quantity !== 0n)
            writer.tag(4, WireType.Varint).int64(message.quantity);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message order.DetailOrderResponseItem
 */
export const DetailOrderResponseItem = new DetailOrderResponseItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DetailOrderResponse$Type extends MessageType<DetailOrderResponse> {
    constructor() {
        super("order.DetailOrderResponse", [
            { no: 1, name: "base", kind: "message", T: () => BaseResponse },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "user_full_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "phone_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "notes", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "order_status_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 10, name: "xendit_invoice_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DetailOrderResponseItem },
            { no: 12, name: "total", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 13, name: "expired_at", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<DetailOrderResponse>): DetailOrderResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.number = "";
        message.userFullName = "";
        message.address = "";
        message.phoneNumber = "";
        message.notes = "";
        message.orderStatusCode = "";
        message.xenditInvoiceUrl = "";
        message.items = [];
        message.total = 0;
        if (value !== undefined)
            reflectionMergePartial<DetailOrderResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DetailOrderResponse): DetailOrderResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.BaseResponse base */ 1:
                    message.base = BaseResponse.internalBinaryRead(reader, reader.uint32(), options, message.base);
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* string number */ 3:
                    message.number = reader.string();
                    break;
                case /* string user_full_name */ 4:
                    message.userFullName = reader.string();
                    break;
                case /* string address */ 5:
                    message.address = reader.string();
                    break;
                case /* string phone_number */ 6:
                    message.phoneNumber = reader.string();
                    break;
                case /* string notes */ 7:
                    message.notes = reader.string();
                    break;
                case /* string order_status_code */ 8:
                    message.orderStatusCode = reader.string();
                    break;
                case /* google.protobuf.Timestamp created_at */ 9:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* string xendit_invoice_url */ 10:
                    message.xenditInvoiceUrl = reader.string();
                    break;
                case /* repeated order.DetailOrderResponseItem items */ 11:
                    message.items.push(DetailOrderResponseItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* double total */ 12:
                    message.total = reader.double();
                    break;
                case /* google.protobuf.Timestamp expired_at */ 13:
                    message.expiredAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.expiredAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DetailOrderResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.BaseResponse base = 1; */
        if (message.base)
            BaseResponse.internalBinaryWrite(message.base, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* string number = 3; */
        if (message.number !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.number);
        /* string user_full_name = 4; */
        if (message.userFullName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.userFullName);
        /* string address = 5; */
        if (message.address !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.address);
        /* string phone_number = 6; */
        if (message.phoneNumber !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.phoneNumber);
        /* string notes = 7; */
        if (message.notes !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.notes);
        /* string order_status_code = 8; */
        if (message.orderStatusCode !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.orderStatusCode);
        /* google.protobuf.Timestamp created_at = 9; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* string xendit_invoice_url = 10; */
        if (message.xenditInvoiceUrl !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.xenditInvoiceUrl);
        /* repeated order.DetailOrderResponseItem items = 11; */
        for (let i = 0; i < message.items.length; i++)
            DetailOrderResponseItem.internalBinaryWrite(message.items[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* double total = 12; */
        if (message.total !== 0)
            writer.tag(12, WireType.Bit64).double(message.total);
        /* google.protobuf.Timestamp expired_at = 13; */
        if (message.expiredAt)
            Timestamp.internalBinaryWrite(message.expiredAt, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message order.DetailOrderResponse
 */
export const DetailOrderResponse = new DetailOrderResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateOrderStatusRequest$Type extends MessageType<UpdateOrderStatusRequest> {
    constructor() {
        super("order.UpdateOrderStatusRequest", [
            { no: 1, name: "order_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { minLen: "1", maxLen: "255" } } } },
            { no: 2, name: "new_status_code", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { minLen: "1", maxLen: "255" } } } }
        ]);
    }
    create(value?: PartialMessage<UpdateOrderStatusRequest>): UpdateOrderStatusRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.orderId = "";
        message.newStatusCode = "";
        if (value !== undefined)
            reflectionMergePartial<UpdateOrderStatusRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateOrderStatusRequest): UpdateOrderStatusRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string order_id */ 1:
                    message.orderId = reader.string();
                    break;
                case /* string new_status_code */ 2:
                    message.newStatusCode = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateOrderStatusRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string order_id = 1; */
        if (message.orderId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.orderId);
        /* string new_status_code = 2; */
        if (message.newStatusCode !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.newStatusCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message order.UpdateOrderStatusRequest
 */
export const UpdateOrderStatusRequest = new UpdateOrderStatusRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateOrderStatusResponse$Type extends MessageType<UpdateOrderStatusResponse> {
    constructor() {
        super("order.UpdateOrderStatusResponse", [
            { no: 1, name: "base", kind: "message", T: () => BaseResponse }
        ]);
    }
    create(value?: PartialMessage<UpdateOrderStatusResponse>): UpdateOrderStatusResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateOrderStatusResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateOrderStatusResponse): UpdateOrderStatusResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.BaseResponse base */ 1:
                    message.base = BaseResponse.internalBinaryRead(reader, reader.uint32(), options, message.base);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateOrderStatusResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.BaseResponse base = 1; */
        if (message.base)
            BaseResponse.internalBinaryWrite(message.base, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message order.UpdateOrderStatusResponse
 */
export const UpdateOrderStatusResponse = new UpdateOrderStatusResponse$Type();
/**
 * @generated ServiceType for protobuf service order.OrderService
 */
export const OrderService = new ServiceType("order.OrderService", [
    { name: "CreateOrder", options: {}, I: CreateOrderRequest, O: CreateOrderResponse },
    { name: "ListOrderAdmin", options: {}, I: ListOrderAdminRequest, O: ListOrderAdminResponse },
    { name: "ListOrder", options: {}, I: ListOrderRequest, O: ListOrderResponse },
    { name: "DetailOrder", options: {}, I: DetailOrderRequest, O: DetailOrderResponse },
    { name: "UpdateOrderStatus", options: {}, I: UpdateOrderStatusRequest, O: UpdateOrderStatusResponse }
]);
