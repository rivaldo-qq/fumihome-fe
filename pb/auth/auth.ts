// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "auth/auth.proto" (package "auth", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../google/protobuf/timestamp";
import { BaseResponse } from "../common/base_response";
/**
 * @generated from protobuf message auth.RegisterRequest
 */
export interface RegisterRequest {
    /**
     * @generated from protobuf field: string full_name = 1;
     */
    fullName: string;
    /**
     * @generated from protobuf field: string email = 2;
     */
    email: string;
    /**
     * @generated from protobuf field: string password = 3;
     */
    password: string;
    /**
     * @generated from protobuf field: string password_confirmation = 4;
     */
    passwordConfirmation: string;
}
/**
 * @generated from protobuf message auth.RegisterResponse
 */
export interface RegisterResponse {
    /**
     * @generated from protobuf field: common.BaseResponse base = 1;
     */
    base?: BaseResponse;
}
/**
 * @generated from protobuf message auth.LoginRequest
 */
export interface LoginRequest {
    /**
     * @generated from protobuf field: string email = 1;
     */
    email: string;
    /**
     * @generated from protobuf field: string password = 2;
     */
    password: string;
}
/**
 * @generated from protobuf message auth.LoginResponse
 */
export interface LoginResponse {
    /**
     * @generated from protobuf field: common.BaseResponse base = 1;
     */
    base?: BaseResponse;
    /**
     * @generated from protobuf field: string access_token = 2;
     */
    accessToken: string;
}
/**
 * @generated from protobuf message auth.LogoutRequest
 */
export interface LogoutRequest {
}
/**
 * @generated from protobuf message auth.LogoutResponse
 */
export interface LogoutResponse {
    /**
     * @generated from protobuf field: common.BaseResponse base = 1;
     */
    base?: BaseResponse;
}
/**
 * @generated from protobuf message auth.ChangePasswordRequest
 */
export interface ChangePasswordRequest {
    /**
     * @generated from protobuf field: string old_password = 1;
     */
    oldPassword: string;
    /**
     * @generated from protobuf field: string new_password = 2;
     */
    newPassword: string;
    /**
     * @generated from protobuf field: string new_password_confirmation = 3;
     */
    newPasswordConfirmation: string;
}
/**
 * @generated from protobuf message auth.ChangePasswordResponse
 */
export interface ChangePasswordResponse {
    /**
     * @generated from protobuf field: common.BaseResponse base = 1;
     */
    base?: BaseResponse;
}
/**
 * @generated from protobuf message auth.GetProfileRequest
 */
export interface GetProfileRequest {
}
/**
 * @generated from protobuf message auth.GetProfileResponse
 */
export interface GetProfileResponse {
    /**
     * @generated from protobuf field: common.BaseResponse base = 1;
     */
    base?: BaseResponse;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
    /**
     * @generated from protobuf field: string full_name = 3;
     */
    fullName: string;
    /**
     * @generated from protobuf field: string email = 4;
     */
    email: string;
    /**
     * @generated from protobuf field: string role_code = 5;
     */
    roleCode: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp member_since = 6;
     */
    memberSince?: Timestamp;
}
// @generated message type with reflection information, may provide speed optimized methods
class RegisterRequest$Type extends MessageType<RegisterRequest> {
    constructor() {
        super("auth.RegisterRequest", [
            { no: 1, name: "full_name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { minLen: "1", maxLen: "255" } } } },
            { no: 2, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { minLen: "1", maxLen: "255", email: true } } } },
            { no: 3, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { minLen: "1", maxLen: "255" } } } },
            { no: 4, name: "password_confirmation", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { minLen: "1", maxLen: "255" } } } }
        ]);
    }
    create(value?: PartialMessage<RegisterRequest>): RegisterRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fullName = "";
        message.email = "";
        message.password = "";
        message.passwordConfirmation = "";
        if (value !== undefined)
            reflectionMergePartial<RegisterRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(_reader: IBinaryReader, _length: number, options: BinaryReadOptions, target?: RegisterRequest): RegisterRequest {
        let message = target ?? this.create(), end = _reader.pos + _length;
        while (_reader.pos < end) {
            let [fieldNo, wireType] = _reader.tag();
            switch (fieldNo) {
                case /* string full_name */ 1:
                    message.fullName = _reader.string();
                    break;
                case /* string email */ 2:
                    message.email = _reader.string();
                    break;
                case /* string password */ 3:
                    message.password = _reader.string();
                    break;
                case /* string password_confirmation */ 4:
                    message.passwordConfirmation = _reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = _reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string full_name = 1; */
        if (message.fullName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.fullName);
        /* string email = 2; */
        if (message.email !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.email);
        /* string password = 3; */
        if (message.password !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.password);
        /* string password_confirmation = 4; */
        if (message.passwordConfirmation !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.passwordConfirmation);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.RegisterRequest
 */
export const RegisterRequest = new RegisterRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterResponse$Type extends MessageType<RegisterResponse> {
    constructor() {
        super("auth.RegisterResponse", [
            { no: 1, name: "base", kind: "message", T: () => BaseResponse }
        ]);
    }
    create(value?: PartialMessage<RegisterResponse>): RegisterResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RegisterResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(_reader: IBinaryReader, _length: number, options: BinaryReadOptions, target?: RegisterResponse): RegisterResponse {
        let message = target ?? this.create(), end = _reader.pos + _length;
        while (_reader.pos < end) {
            let [fieldNo, wireType] = _reader.tag();
            switch (fieldNo) {
                case /* common.BaseResponse base */ 1:
                    message.base = BaseResponse.internalBinaryRead(_reader, _reader.uint32(), options, message.base);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = _reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.BaseResponse base = 1; */
        if (message.base)
            BaseResponse.internalBinaryWrite(message.base, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.RegisterResponse
 */
export const RegisterResponse = new RegisterResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoginRequest$Type extends MessageType<LoginRequest> {
    constructor() {
        super("auth.LoginRequest", [
            { no: 1, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { minLen: "1", maxLen: "255", email: true } } } },
            { no: 2, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { minLen: "1", maxLen: "255" } } } }
        ]);
    }
    create(value?: PartialMessage<LoginRequest>): LoginRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.email = "";
        message.password = "";
        if (value !== undefined)
            reflectionMergePartial<LoginRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(_reader: IBinaryReader, _length: number, options: BinaryReadOptions, target?: LoginRequest): LoginRequest {
        let message = target ?? this.create(), end = _reader.pos + _length;
        while (_reader.pos < end) {
            let [fieldNo, wireType] = _reader.tag();
            switch (fieldNo) {
                case /* string email */ 1:
                    message.email = _reader.string();
                    break;
                case /* string password */ 2:
                    message.password = _reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = _reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoginRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string email = 1; */
        if (message.email !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.email);
        /* string password = 2; */
        if (message.password !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.password);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.LoginRequest
 */
export const LoginRequest = new LoginRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoginResponse$Type extends MessageType<LoginResponse> {
    constructor() {
        super("auth.LoginResponse", [
            { no: 1, name: "base", kind: "message", T: () => BaseResponse },
            { no: 2, name: "access_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoginResponse>): LoginResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.accessToken = "";
        if (value !== undefined)
            reflectionMergePartial<LoginResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(_reader: IBinaryReader, _length: number, options: BinaryReadOptions, target?: LoginResponse): LoginResponse {
        let message = target ?? this.create(), end = _reader.pos + _length;
        while (_reader.pos < end) {
            let [fieldNo, wireType] = _reader.tag();
            switch (fieldNo) {
                case /* common.BaseResponse base */ 1:
                    message.base = BaseResponse.internalBinaryRead(_reader, _reader.uint32(), options, message.base);
                    break;
                case /* string access_token */ 2:
                    message.accessToken = _reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = _reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoginResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.BaseResponse base = 1; */
        if (message.base)
            BaseResponse.internalBinaryWrite(message.base, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string access_token = 2; */
        if (message.accessToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.accessToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.LoginResponse
 */
export const LoginResponse = new LoginResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LogoutRequest$Type extends MessageType<LogoutRequest> {
    constructor() {
        super("auth.LogoutRequest", []);
    }
    create(value?: PartialMessage<LogoutRequest>): LogoutRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LogoutRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(_reader: IBinaryReader, _length: number, options: BinaryReadOptions, target?: LogoutRequest): LogoutRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LogoutRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.LogoutRequest
 */
export const LogoutRequest = new LogoutRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LogoutResponse$Type extends MessageType<LogoutResponse> {
    constructor() {
        super("auth.LogoutResponse", [
            { no: 1, name: "base", kind: "message", T: () => BaseResponse }
        ]);
    }
    create(value?: PartialMessage<LogoutResponse>): LogoutResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LogoutResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(_reader: IBinaryReader, _length: number, options: BinaryReadOptions, target?: LogoutResponse): LogoutResponse {
        let message = target ?? this.create(), end = _reader.pos + _length;
        while (_reader.pos < end) {
            let [fieldNo, wireType] = _reader.tag();
            switch (fieldNo) {
                case /* common.BaseResponse base */ 1:
                    message.base = BaseResponse.internalBinaryRead(_reader, _reader.uint32(), options, message.base);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = _reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LogoutResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.BaseResponse base = 1; */
        if (message.base)
            BaseResponse.internalBinaryWrite(message.base, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.LogoutResponse
 */
export const LogoutResponse = new LogoutResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangePasswordRequest$Type extends MessageType<ChangePasswordRequest> {
    constructor() {
        super("auth.ChangePasswordRequest", [
            { no: 1, name: "old_password", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { minLen: "1", maxLen: "255" } } } },
            { no: 2, name: "new_password", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { minLen: "1", maxLen: "255" } } } },
            { no: 3, name: "new_password_confirmation", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { minLen: "1", maxLen: "255" } } } }
        ]);
    }
    create(value?: PartialMessage<ChangePasswordRequest>): ChangePasswordRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.oldPassword = "";
        message.newPassword = "";
        message.newPasswordConfirmation = "";
        if (value !== undefined)
            reflectionMergePartial<ChangePasswordRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(_reader: IBinaryReader, _length: number, options: BinaryReadOptions, target?: ChangePasswordRequest): ChangePasswordRequest {
        let message = target ?? this.create(), end = _reader.pos + _length;
        while (_reader.pos < end) {
            let [fieldNo, wireType] = _reader.tag();
            switch (fieldNo) {
                case /* string old_password */ 1:
                    message.oldPassword = _reader.string();
                    break;
                case /* string new_password */ 2:
                    message.newPassword = _reader.string();
                    break;
                case /* string new_password_confirmation */ 3:
                    message.newPasswordConfirmation = _reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = _reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangePasswordRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string old_password = 1; */
        if (message.oldPassword !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.oldPassword);
        /* string new_password = 2; */
        if (message.newPassword !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.newPassword);
        /* string new_password_confirmation = 3; */
        if (message.newPasswordConfirmation !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.newPasswordConfirmation);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.ChangePasswordRequest
 */
export const ChangePasswordRequest = new ChangePasswordRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangePasswordResponse$Type extends MessageType<ChangePasswordResponse> {
    constructor() {
        super("auth.ChangePasswordResponse", [
            { no: 1, name: "base", kind: "message", T: () => BaseResponse }
        ]);
    }
    create(value?: PartialMessage<ChangePasswordResponse>): ChangePasswordResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ChangePasswordResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(_reader: IBinaryReader, _length: number, options: BinaryReadOptions, target?: ChangePasswordResponse): ChangePasswordResponse {
        let message = target ?? this.create(), end = _reader.pos + _length;
        while (_reader.pos < end) {
            let [fieldNo, wireType] = _reader.tag();
            switch (fieldNo) {
                case /* common.BaseResponse base */ 1:
                    message.base = BaseResponse.internalBinaryRead(_reader, _reader.uint32(), options, message.base);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = _reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangePasswordResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.BaseResponse base = 1; */
        if (message.base)
            BaseResponse.internalBinaryWrite(message.base, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.ChangePasswordResponse
 */
export const ChangePasswordResponse = new ChangePasswordResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetProfileRequest$Type extends MessageType<GetProfileRequest> {
    constructor() {
        super("auth.GetProfileRequest", []);
    }
    create(value?: PartialMessage<GetProfileRequest>): GetProfileRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetProfileRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(_reader: IBinaryReader, _length: number, options: BinaryReadOptions, target?: GetProfileRequest): GetProfileRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetProfileRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.GetProfileRequest
 */
export const GetProfileRequest = new GetProfileRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetProfileResponse$Type extends MessageType<GetProfileResponse> {
    constructor() {
        super("auth.GetProfileResponse", [
            { no: 1, name: "base", kind: "message", T: () => BaseResponse },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "full_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "role_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "member_since", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<GetProfileResponse>): GetProfileResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        message.fullName = "";
        message.email = "";
        message.roleCode = "";
        if (value !== undefined)
            reflectionMergePartial<GetProfileResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(_reader: IBinaryReader, _length: number, options: BinaryReadOptions, target?: GetProfileResponse): GetProfileResponse {
        let message = target ?? this.create(), end = _reader.pos + _length;
        while (_reader.pos < end) {
            let [fieldNo, wireType] = _reader.tag();
            switch (fieldNo) {
                case /* common.BaseResponse base */ 1:
                    message.base = BaseResponse.internalBinaryRead(_reader, _reader.uint32(), options, message.base);
                    break;
                case /* string user_id */ 2:
                    message.userId = _reader.string();
                    break;
                case /* string full_name */ 3:
                    message.fullName = _reader.string();
                    break;
                case /* string email */ 4:
                    message.email = _reader.string();
                    break;
                case /* string role_code */ 5:
                    message.roleCode = _reader.string();
                    break;
                case /* google.protobuf.Timestamp member_since */ 6:
                    message.memberSince = Timestamp.internalBinaryRead(_reader, _reader.uint32(), options, message.memberSince);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = _reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetProfileResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.BaseResponse base = 1; */
        if (message.base)
            BaseResponse.internalBinaryWrite(message.base, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        /* string full_name = 3; */
        if (message.fullName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.fullName);
        /* string email = 4; */
        if (message.email !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.email);
        /* string role_code = 5; */
        if (message.roleCode !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.roleCode);
        /* google.protobuf.Timestamp member_since = 6; */
        if (message.memberSince)
            Timestamp.internalBinaryWrite(message.memberSince, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.GetProfileResponse
 */
export const GetProfileResponse = new GetProfileResponse$Type();
/**
 * @generated ServiceType for protobuf service auth.AuthService
 */
export const AuthService = new ServiceType("auth.AuthService", [
    { name: "Register", options: {}, I: RegisterRequest, O: RegisterResponse },
    { name: "Login", options: {}, I: LoginRequest, O: LoginResponse },
    { name: "Logout", options: {}, I: LogoutRequest, O: LogoutResponse },
    { name: "ChangePassword", options: {}, I: ChangePasswordRequest, O: ChangePasswordResponse },
    { name: "GetProfile", options: {}, I: GetProfileRequest, O: GetProfileResponse }
]);
