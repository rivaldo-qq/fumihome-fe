// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "common/pagination.proto" (package "common", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message common.PaginationSortRequest
 */
export interface PaginationSortRequest {
    /**
     * @generated from protobuf field: string field = 1;
     */
    field: string;
    /**
     * @generated from protobuf field: string direction = 2;
     */
    direction: string;
}
/**
 * @generated from protobuf message common.PaginationRequest
 */
export interface PaginationRequest {
    /**
     * @generated from protobuf field: int32 current_page = 1;
     */
    currentPage: number;
    /**
     * @generated from protobuf field: int32 item_per_page = 2;
     */
    itemPerPage: number;
    /**
     * @generated from protobuf field: common.PaginationSortRequest sort = 3;
     */
    sort?: PaginationSortRequest;
}
/**
 * @generated from protobuf message common.PaginationResponse
 */
export interface PaginationResponse {
    /**
     * @generated from protobuf field: int32 current_page = 1;
     */
    currentPage: number;
    /**
     * @generated from protobuf field: int32 total_page_count = 2;
     */
    totalPageCount: number;
    /**
     * @generated from protobuf field: int32 item_per_page = 3;
     */
    itemPerPage: number;
    /**
     * @generated from protobuf field: int32 total_item_count = 4;
     */
    totalItemCount: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class PaginationSortRequest$Type extends MessageType<PaginationSortRequest> {
    constructor() {
        super("common.PaginationSortRequest", [
            { no: 1, name: "field", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "direction", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PaginationSortRequest>): PaginationSortRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.field = "";
        message.direction = "";
        if (value !== undefined)
            reflectionMergePartial<PaginationSortRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PaginationSortRequest): PaginationSortRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string field */ 1:
                    message.field = reader.string();
                    break;
                case /* string direction */ 2:
                    message.direction = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PaginationSortRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string field = 1; */
        if (message.field !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.field);
        /* string direction = 2; */
        if (message.direction !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.direction);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message common.PaginationSortRequest
 */
export const PaginationSortRequest = new PaginationSortRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PaginationRequest$Type extends MessageType<PaginationRequest> {
    constructor() {
        super("common.PaginationRequest", [
            { no: 1, name: "current_page", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "item_per_page", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "sort", kind: "message", T: () => PaginationSortRequest }
        ]);
    }
    create(value?: PartialMessage<PaginationRequest>): PaginationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.currentPage = 0;
        message.itemPerPage = 0;
        if (value !== undefined)
            reflectionMergePartial<PaginationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PaginationRequest): PaginationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 current_page */ 1:
                    message.currentPage = reader.int32();
                    break;
                case /* int32 item_per_page */ 2:
                    message.itemPerPage = reader.int32();
                    break;
                case /* common.PaginationSortRequest sort */ 3:
                    message.sort = PaginationSortRequest.internalBinaryRead(reader, reader.uint32(), options, message.sort);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PaginationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 current_page = 1; */
        if (message.currentPage !== 0)
            writer.tag(1, WireType.Varint).int32(message.currentPage);
        /* int32 item_per_page = 2; */
        if (message.itemPerPage !== 0)
            writer.tag(2, WireType.Varint).int32(message.itemPerPage);
        /* common.PaginationSortRequest sort = 3; */
        if (message.sort)
            PaginationSortRequest.internalBinaryWrite(message.sort, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message common.PaginationRequest
 */
export const PaginationRequest = new PaginationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PaginationResponse$Type extends MessageType<PaginationResponse> {
    constructor() {
        super("common.PaginationResponse", [
            { no: 1, name: "current_page", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "total_page_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "item_per_page", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "total_item_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PaginationResponse>): PaginationResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.currentPage = 0;
        message.totalPageCount = 0;
        message.itemPerPage = 0;
        message.totalItemCount = 0;
        if (value !== undefined)
            reflectionMergePartial<PaginationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PaginationResponse): PaginationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 current_page */ 1:
                    message.currentPage = reader.int32();
                    break;
                case /* int32 total_page_count */ 2:
                    message.totalPageCount = reader.int32();
                    break;
                case /* int32 item_per_page */ 3:
                    message.itemPerPage = reader.int32();
                    break;
                case /* int32 total_item_count */ 4:
                    message.totalItemCount = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PaginationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 current_page = 1; */
        if (message.currentPage !== 0)
            writer.tag(1, WireType.Varint).int32(message.currentPage);
        /* int32 total_page_count = 2; */
        if (message.totalPageCount !== 0)
            writer.tag(2, WireType.Varint).int32(message.totalPageCount);
        /* int32 item_per_page = 3; */
        if (message.itemPerPage !== 0)
            writer.tag(3, WireType.Varint).int32(message.itemPerPage);
        /* int32 total_item_count = 4; */
        if (message.totalItemCount !== 0)
            writer.tag(4, WireType.Varint).int32(message.totalItemCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message common.PaginationResponse
 */
export const PaginationResponse = new PaginationResponse$Type();
