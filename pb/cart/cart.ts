// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "cart/cart.proto" (package "cart", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { BaseResponse } from "../common/base_response";
/**
 * @generated from protobuf message cart.AddProductToCartRequest
 */
export interface AddProductToCartRequest {
    /**
     * @generated from protobuf field: string product_id = 1;
     */
    productId: string;
}
/**
 * @generated from protobuf message cart.AddProductToCartResponse
 */
export interface AddProductToCartResponse {
    /**
     * @generated from protobuf field: common.BaseResponse base = 1;
     */
    base?: BaseResponse;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
}
/**
 * @generated from protobuf message cart.ListCartRequest
 */
export interface ListCartRequest {
}
/**
 * @generated from protobuf message cart.ListCartResponseItem
 */
export interface ListCartResponseItem {
    /**
     * @generated from protobuf field: string cart_id = 1;
     */
    cartId: string;
    /**
     * @generated from protobuf field: string product_id = 2;
     */
    productId: string;
    /**
     * @generated from protobuf field: string product_name = 3;
     */
    productName: string;
    /**
     * @generated from protobuf field: string product_image_url = 4;
     */
    productImageUrl: string;
    /**
     * @generated from protobuf field: double product_price = 5;
     */
    productPrice: number;
    /**
     * @generated from protobuf field: int64 quantity = 6;
     */
    quantity: bigint;
}
/**
 * @generated from protobuf message cart.ListCartResponse
 */
export interface ListCartResponse {
    /**
     * @generated from protobuf field: common.BaseResponse base = 1;
     */
    base?: BaseResponse;
    /**
     * @generated from protobuf field: repeated cart.ListCartResponseItem items = 2;
     */
    items: ListCartResponseItem[];
}
/**
 * @generated from protobuf message cart.DeleteCartRequest
 */
export interface DeleteCartRequest {
    /**
     * @generated from protobuf field: string cart_id = 1;
     */
    cartId: string;
}
/**
 * @generated from protobuf message cart.DeleteCartResponse
 */
export interface DeleteCartResponse {
    /**
     * @generated from protobuf field: common.BaseResponse base = 1;
     */
    base?: BaseResponse;
}
/**
 * @generated from protobuf message cart.UpdateCartQuantityRequest
 */
export interface UpdateCartQuantityRequest {
    /**
     * @generated from protobuf field: string cart_id = 1;
     */
    cartId: string;
    /**
     * @generated from protobuf field: int64 new_quantity = 2;
     */
    newQuantity: bigint;
}
/**
 * @generated from protobuf message cart.UpdateCartQuantityResponse
 */
export interface UpdateCartQuantityResponse {
    /**
     * @generated from protobuf field: common.BaseResponse base = 1;
     */
    base?: BaseResponse;
}
// @generated message type with reflection information, may provide speed optimized methods
class AddProductToCartRequest$Type extends MessageType<AddProductToCartRequest> {
    constructor() {
        super("cart.AddProductToCartRequest", [
            { no: 1, name: "product_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { minLen: "1", maxLen: "255" } } } }
        ]);
    }
    create(value?: PartialMessage<AddProductToCartRequest>): AddProductToCartRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.productId = "";
        if (value !== undefined)
            reflectionMergePartial<AddProductToCartRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddProductToCartRequest): AddProductToCartRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string product_id */ 1:
                    message.productId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddProductToCartRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string product_id = 1; */
        if (message.productId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.productId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cart.AddProductToCartRequest
 */
export const AddProductToCartRequest = new AddProductToCartRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddProductToCartResponse$Type extends MessageType<AddProductToCartResponse> {
    constructor() {
        super("cart.AddProductToCartResponse", [
            { no: 1, name: "base", kind: "message", T: () => BaseResponse },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AddProductToCartResponse>): AddProductToCartResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<AddProductToCartResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddProductToCartResponse): AddProductToCartResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.BaseResponse base */ 1:
                    message.base = BaseResponse.internalBinaryRead(reader, reader.uint32(), options, message.base);
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddProductToCartResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.BaseResponse base = 1; */
        if (message.base)
            BaseResponse.internalBinaryWrite(message.base, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cart.AddProductToCartResponse
 */
export const AddProductToCartResponse = new AddProductToCartResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListCartRequest$Type extends MessageType<ListCartRequest> {
    constructor() {
        super("cart.ListCartRequest", []);
    }
    create(value?: PartialMessage<ListCartRequest>): ListCartRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListCartRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListCartRequest): ListCartRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ListCartRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cart.ListCartRequest
 */
export const ListCartRequest = new ListCartRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListCartResponseItem$Type extends MessageType<ListCartResponseItem> {
    constructor() {
        super("cart.ListCartResponseItem", [
            { no: 1, name: "cart_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "product_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "product_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "product_image_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "product_price", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "quantity", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ListCartResponseItem>): ListCartResponseItem {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cartId = "";
        message.productId = "";
        message.productName = "";
        message.productImageUrl = "";
        message.productPrice = 0;
        message.quantity = 0n;
        if (value !== undefined)
            reflectionMergePartial<ListCartResponseItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListCartResponseItem): ListCartResponseItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cart_id */ 1:
                    message.cartId = reader.string();
                    break;
                case /* string product_id */ 2:
                    message.productId = reader.string();
                    break;
                case /* string product_name */ 3:
                    message.productName = reader.string();
                    break;
                case /* string product_image_url */ 4:
                    message.productImageUrl = reader.string();
                    break;
                case /* double product_price */ 5:
                    message.productPrice = reader.double();
                    break;
                case /* int64 quantity */ 6:
                    message.quantity = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListCartResponseItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cart_id = 1; */
        if (message.cartId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cartId);
        /* string product_id = 2; */
        if (message.productId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.productId);
        /* string product_name = 3; */
        if (message.productName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.productName);
        /* string product_image_url = 4; */
        if (message.productImageUrl !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.productImageUrl);
        /* double product_price = 5; */
        if (message.productPrice !== 0)
            writer.tag(5, WireType.Bit64).double(message.productPrice);
        /* int64 quantity = 6; */
        if (message.quantity !== 0n)
            writer.tag(6, WireType.Varint).int64(message.quantity);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cart.ListCartResponseItem
 */
export const ListCartResponseItem = new ListCartResponseItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListCartResponse$Type extends MessageType<ListCartResponse> {
    constructor() {
        super("cart.ListCartResponse", [
            { no: 1, name: "base", kind: "message", T: () => BaseResponse },
            { no: 2, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ListCartResponseItem }
        ]);
    }
    create(value?: PartialMessage<ListCartResponse>): ListCartResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.items = [];
        if (value !== undefined)
            reflectionMergePartial<ListCartResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListCartResponse): ListCartResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.BaseResponse base */ 1:
                    message.base = BaseResponse.internalBinaryRead(reader, reader.uint32(), options, message.base);
                    break;
                case /* repeated cart.ListCartResponseItem items */ 2:
                    message.items.push(ListCartResponseItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListCartResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.BaseResponse base = 1; */
        if (message.base)
            BaseResponse.internalBinaryWrite(message.base, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated cart.ListCartResponseItem items = 2; */
        for (let i = 0; i < message.items.length; i++)
            ListCartResponseItem.internalBinaryWrite(message.items[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cart.ListCartResponse
 */
export const ListCartResponse = new ListCartResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteCartRequest$Type extends MessageType<DeleteCartRequest> {
    constructor() {
        super("cart.DeleteCartRequest", [
            { no: 1, name: "cart_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { minLen: "1", maxLen: "255" } } } }
        ]);
    }
    create(value?: PartialMessage<DeleteCartRequest>): DeleteCartRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cartId = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteCartRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteCartRequest): DeleteCartRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cart_id */ 1:
                    message.cartId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteCartRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cart_id = 1; */
        if (message.cartId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cartId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cart.DeleteCartRequest
 */
export const DeleteCartRequest = new DeleteCartRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteCartResponse$Type extends MessageType<DeleteCartResponse> {
    constructor() {
        super("cart.DeleteCartResponse", [
            { no: 1, name: "base", kind: "message", T: () => BaseResponse }
        ]);
    }
    create(value?: PartialMessage<DeleteCartResponse>): DeleteCartResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteCartResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteCartResponse): DeleteCartResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.BaseResponse base */ 1:
                    message.base = BaseResponse.internalBinaryRead(reader, reader.uint32(), options, message.base);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteCartResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.BaseResponse base = 1; */
        if (message.base)
            BaseResponse.internalBinaryWrite(message.base, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cart.DeleteCartResponse
 */
export const DeleteCartResponse = new DeleteCartResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateCartQuantityRequest$Type extends MessageType<UpdateCartQuantityRequest> {
    constructor() {
        super("cart.UpdateCartQuantityRequest", [
            { no: 1, name: "cart_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { minLen: "1", maxLen: "255" } } } },
            { no: 2, name: "new_quantity", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/, options: { "buf.validate.field": { int64: { gte: "0" } } } }
        ]);
    }
    create(value?: PartialMessage<UpdateCartQuantityRequest>): UpdateCartQuantityRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cartId = "";
        message.newQuantity = 0n;
        if (value !== undefined)
            reflectionMergePartial<UpdateCartQuantityRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateCartQuantityRequest): UpdateCartQuantityRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cart_id */ 1:
                    message.cartId = reader.string();
                    break;
                case /* int64 new_quantity */ 2:
                    message.newQuantity = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateCartQuantityRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cart_id = 1; */
        if (message.cartId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cartId);
        /* int64 new_quantity = 2; */
        if (message.newQuantity !== 0n)
            writer.tag(2, WireType.Varint).int64(message.newQuantity);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cart.UpdateCartQuantityRequest
 */
export const UpdateCartQuantityRequest = new UpdateCartQuantityRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateCartQuantityResponse$Type extends MessageType<UpdateCartQuantityResponse> {
    constructor() {
        super("cart.UpdateCartQuantityResponse", [
            { no: 1, name: "base", kind: "message", T: () => BaseResponse }
        ]);
    }
    create(value?: PartialMessage<UpdateCartQuantityResponse>): UpdateCartQuantityResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateCartQuantityResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateCartQuantityResponse): UpdateCartQuantityResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.BaseResponse base */ 1:
                    message.base = BaseResponse.internalBinaryRead(reader, reader.uint32(), options, message.base);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateCartQuantityResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.BaseResponse base = 1; */
        if (message.base)
            BaseResponse.internalBinaryWrite(message.base, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cart.UpdateCartQuantityResponse
 */
export const UpdateCartQuantityResponse = new UpdateCartQuantityResponse$Type();
/**
 * @generated ServiceType for protobuf service cart.CartService
 */
export const CartService = new ServiceType("cart.CartService", [
    { name: "AddProductToCart", options: {}, I: AddProductToCartRequest, O: AddProductToCartResponse },
    { name: "ListCart", options: {}, I: ListCartRequest, O: ListCartResponse },
    { name: "DeleteCart", options: {}, I: DeleteCartRequest, O: DeleteCartResponse },
    { name: "UpdateCartQuantity", options: {}, I: UpdateCartQuantityRequest, O: UpdateCartQuantityResponse }
]);
