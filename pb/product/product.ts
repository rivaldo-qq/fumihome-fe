// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "product/product.proto" (package "product", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { PaginationResponse } from "../common/pagination";
import { PaginationRequest } from "../common/pagination";
import { BaseResponse } from "../common/base_response";
/**
 * @generated from protobuf message product.CreateProductRequest
 */
export interface CreateProductRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string description = 2;
     */
    description: string;
    /**
     * @generated from protobuf field: double price = 3;
     */
    price: number;
    /**
     * @generated from protobuf field: string image_file_name = 4;
     */
    imageFileName: string;
}
/**
 * @generated from protobuf message product.CreateProductResponse
 */
export interface CreateProductResponse {
    /**
     * @generated from protobuf field: common.BaseResponse base = 1;
     */
    base?: BaseResponse;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
}
/**
 * @generated from protobuf message product.DetailProductRequest
 */
export interface DetailProductRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message product.DetailProductResponse
 */
export interface DetailProductResponse {
    /**
     * @generated from protobuf field: common.BaseResponse base = 1;
     */
    base?: BaseResponse;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
    /**
     * @generated from protobuf field: string description = 4;
     */
    description: string;
    /**
     * @generated from protobuf field: double price = 5;
     */
    price: number;
    /**
     * @generated from protobuf field: string image_url = 6;
     */
    imageUrl: string;
}
/**
 * @generated from protobuf message product.EditProductRequest
 */
export interface EditProductRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string description = 3;
     */
    description: string;
    /**
     * @generated from protobuf field: double price = 4;
     */
    price: number;
    /**
     * @generated from protobuf field: string image_file_name = 5;
     */
    imageFileName: string;
}
/**
 * @generated from protobuf message product.EditProductResponse
 */
export interface EditProductResponse {
    /**
     * @generated from protobuf field: common.BaseResponse base = 1;
     */
    base?: BaseResponse;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
}
/**
 * @generated from protobuf message product.DeleteProductRequest
 */
export interface DeleteProductRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message product.DeleteProductResponse
 */
export interface DeleteProductResponse {
    /**
     * @generated from protobuf field: common.BaseResponse base = 1;
     */
    base?: BaseResponse;
}
/**
 * @generated from protobuf message product.ListProductRequest
 */
export interface ListProductRequest {
    /**
     * @generated from protobuf field: common.PaginationRequest pagination = 1;
     */
    pagination?: PaginationRequest;
}
/**
 * @generated from protobuf message product.ListProductResponseItem
 */
export interface ListProductResponseItem {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string description = 3;
     */
    description: string;
    /**
     * @generated from protobuf field: double price = 4;
     */
    price: number;
    /**
     * @generated from protobuf field: string image_url = 5;
     */
    imageUrl: string;
}
/**
 * @generated from protobuf message product.ListProductResponse
 */
export interface ListProductResponse {
    /**
     * @generated from protobuf field: common.BaseResponse base = 1;
     */
    base?: BaseResponse;
    /**
     * @generated from protobuf field: common.PaginationResponse pagination = 2;
     */
    pagination?: PaginationResponse;
    /**
     * @generated from protobuf field: repeated product.ListProductResponseItem data = 3;
     */
    data: ListProductResponseItem[];
}
/**
 * @generated from protobuf message product.ListProductAdminRequest
 */
export interface ListProductAdminRequest {
    /**
     * @generated from protobuf field: common.PaginationRequest pagination = 1;
     */
    pagination?: PaginationRequest;
}
/**
 * @generated from protobuf message product.ListProductAdminResponseItem
 */
export interface ListProductAdminResponseItem {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string description = 3;
     */
    description: string;
    /**
     * @generated from protobuf field: double price = 4;
     */
    price: number;
    /**
     * @generated from protobuf field: string image_url = 5;
     */
    imageUrl: string;
}
/**
 * @generated from protobuf message product.ListProductAdminResponse
 */
export interface ListProductAdminResponse {
    /**
     * @generated from protobuf field: common.BaseResponse base = 1;
     */
    base?: BaseResponse;
    /**
     * @generated from protobuf field: common.PaginationResponse pagination = 2;
     */
    pagination?: PaginationResponse;
    /**
     * @generated from protobuf field: repeated product.ListProductAdminResponseItem data = 3;
     */
    data: ListProductAdminResponseItem[];
}
/**
 * @generated from protobuf message product.HighlightProductsRequest
 */
export interface HighlightProductsRequest {
}
/**
 * @generated from protobuf message product.HighlightProductsResponseItem
 */
export interface HighlightProductsResponseItem {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string description = 3;
     */
    description: string;
    /**
     * @generated from protobuf field: double price = 4;
     */
    price: number;
    /**
     * @generated from protobuf field: string image_url = 5;
     */
    imageUrl: string;
}
/**
 * @generated from protobuf message product.HighlightProductsResponse
 */
export interface HighlightProductsResponse {
    /**
     * @generated from protobuf field: common.BaseResponse base = 1;
     */
    base?: BaseResponse;
    /**
     * @generated from protobuf field: repeated product.HighlightProductsResponseItem data = 2;
     */
    data: HighlightProductsResponseItem[];
}
// @generated message type with reflection information, may provide speed optimized methods
class CreateProductRequest$Type extends MessageType<CreateProductRequest> {
    constructor() {
        super("product.CreateProductRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { minLen: "1", maxLen: "255" } } } },
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { minLen: "1", maxLen: "255" } } } },
            { no: 3, name: "price", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/, options: { "buf.validate.field": { double: { gte: 0 } } } },
            { no: 4, name: "image_file_name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { minLen: "1", maxLen: "255" } } } }
        ]);
    }
    create(value?: PartialMessage<CreateProductRequest>): CreateProductRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.description = "";
        message.price = 0;
        message.imageFileName = "";
        if (value !== undefined)
            reflectionMergePartial<CreateProductRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateProductRequest): CreateProductRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                case /* double price */ 3:
                    message.price = reader.double();
                    break;
                case /* string image_file_name */ 4:
                    message.imageFileName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateProductRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        /* double price = 3; */
        if (message.price !== 0)
            writer.tag(3, WireType.Bit64).double(message.price);
        /* string image_file_name = 4; */
        if (message.imageFileName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.imageFileName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message product.CreateProductRequest
 */
export const CreateProductRequest = new CreateProductRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateProductResponse$Type extends MessageType<CreateProductResponse> {
    constructor() {
        super("product.CreateProductResponse", [
            { no: 1, name: "base", kind: "message", T: () => BaseResponse },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateProductResponse>): CreateProductResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<CreateProductResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateProductResponse): CreateProductResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.BaseResponse base */ 1:
                    message.base = BaseResponse.internalBinaryRead(reader, reader.uint32(), options, message.base);
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateProductResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.BaseResponse base = 1; */
        if (message.base)
            BaseResponse.internalBinaryWrite(message.base, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message product.CreateProductResponse
 */
export const CreateProductResponse = new CreateProductResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DetailProductRequest$Type extends MessageType<DetailProductRequest> {
    constructor() {
        super("product.DetailProductRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { minLen: "1", maxLen: "255" } } } }
        ]);
    }
    create(value?: PartialMessage<DetailProductRequest>): DetailProductRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<DetailProductRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DetailProductRequest): DetailProductRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DetailProductRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message product.DetailProductRequest
 */
export const DetailProductRequest = new DetailProductRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DetailProductResponse$Type extends MessageType<DetailProductResponse> {
    constructor() {
        super("product.DetailProductResponse", [
            { no: 1, name: "base", kind: "message", T: () => BaseResponse },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "price", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "image_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DetailProductResponse>): DetailProductResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.description = "";
        message.price = 0;
        message.imageUrl = "";
        if (value !== undefined)
            reflectionMergePartial<DetailProductResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DetailProductResponse): DetailProductResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.BaseResponse base */ 1:
                    message.base = BaseResponse.internalBinaryRead(reader, reader.uint32(), options, message.base);
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* string description */ 4:
                    message.description = reader.string();
                    break;
                case /* double price */ 5:
                    message.price = reader.double();
                    break;
                case /* string image_url */ 6:
                    message.imageUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DetailProductResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.BaseResponse base = 1; */
        if (message.base)
            BaseResponse.internalBinaryWrite(message.base, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* string description = 4; */
        if (message.description !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.description);
        /* double price = 5; */
        if (message.price !== 0)
            writer.tag(5, WireType.Bit64).double(message.price);
        /* string image_url = 6; */
        if (message.imageUrl !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.imageUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message product.DetailProductResponse
 */
export const DetailProductResponse = new DetailProductResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EditProductRequest$Type extends MessageType<EditProductRequest> {
    constructor() {
        super("product.EditProductRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { minLen: "1", maxLen: "255" } } } },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { minLen: "1", maxLen: "255" } } } },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { minLen: "1", maxLen: "255" } } } },
            { no: 4, name: "price", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/, options: { "buf.validate.field": { double: { gte: 0 } } } },
            { no: 5, name: "image_file_name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { minLen: "1", maxLen: "255" } } } }
        ]);
    }
    create(value?: PartialMessage<EditProductRequest>): EditProductRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.description = "";
        message.price = 0;
        message.imageFileName = "";
        if (value !== undefined)
            reflectionMergePartial<EditProductRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EditProductRequest): EditProductRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                case /* double price */ 4:
                    message.price = reader.double();
                    break;
                case /* string image_file_name */ 5:
                    message.imageFileName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EditProductRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* double price = 4; */
        if (message.price !== 0)
            writer.tag(4, WireType.Bit64).double(message.price);
        /* string image_file_name = 5; */
        if (message.imageFileName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.imageFileName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message product.EditProductRequest
 */
export const EditProductRequest = new EditProductRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EditProductResponse$Type extends MessageType<EditProductResponse> {
    constructor() {
        super("product.EditProductResponse", [
            { no: 1, name: "base", kind: "message", T: () => BaseResponse },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EditProductResponse>): EditProductResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<EditProductResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EditProductResponse): EditProductResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.BaseResponse base */ 1:
                    message.base = BaseResponse.internalBinaryRead(reader, reader.uint32(), options, message.base);
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EditProductResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.BaseResponse base = 1; */
        if (message.base)
            BaseResponse.internalBinaryWrite(message.base, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message product.EditProductResponse
 */
export const EditProductResponse = new EditProductResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteProductRequest$Type extends MessageType<DeleteProductRequest> {
    constructor() {
        super("product.DeleteProductRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { minLen: "1", maxLen: "255" } } } }
        ]);
    }
    create(value?: PartialMessage<DeleteProductRequest>): DeleteProductRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteProductRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteProductRequest): DeleteProductRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteProductRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message product.DeleteProductRequest
 */
export const DeleteProductRequest = new DeleteProductRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteProductResponse$Type extends MessageType<DeleteProductResponse> {
    constructor() {
        super("product.DeleteProductResponse", [
            { no: 1, name: "base", kind: "message", T: () => BaseResponse }
        ]);
    }
    create(value?: PartialMessage<DeleteProductResponse>): DeleteProductResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteProductResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteProductResponse): DeleteProductResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.BaseResponse base */ 1:
                    message.base = BaseResponse.internalBinaryRead(reader, reader.uint32(), options, message.base);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteProductResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.BaseResponse base = 1; */
        if (message.base)
            BaseResponse.internalBinaryWrite(message.base, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message product.DeleteProductResponse
 */
export const DeleteProductResponse = new DeleteProductResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListProductRequest$Type extends MessageType<ListProductRequest> {
    constructor() {
        super("product.ListProductRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationRequest }
        ]);
    }
    create(value?: PartialMessage<ListProductRequest>): ListProductRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListProductRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListProductRequest): ListProductRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.PaginationRequest pagination */ 1:
                    message.pagination = PaginationRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListProductRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.PaginationRequest pagination = 1; */
        if (message.pagination)
            PaginationRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message product.ListProductRequest
 */
export const ListProductRequest = new ListProductRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListProductResponseItem$Type extends MessageType<ListProductResponseItem> {
    constructor() {
        super("product.ListProductResponseItem", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "price", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "image_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListProductResponseItem>): ListProductResponseItem {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.description = "";
        message.price = 0;
        message.imageUrl = "";
        if (value !== undefined)
            reflectionMergePartial<ListProductResponseItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListProductResponseItem): ListProductResponseItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                case /* double price */ 4:
                    message.price = reader.double();
                    break;
                case /* string image_url */ 5:
                    message.imageUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListProductResponseItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* double price = 4; */
        if (message.price !== 0)
            writer.tag(4, WireType.Bit64).double(message.price);
        /* string image_url = 5; */
        if (message.imageUrl !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.imageUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message product.ListProductResponseItem
 */
export const ListProductResponseItem = new ListProductResponseItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListProductResponse$Type extends MessageType<ListProductResponse> {
    constructor() {
        super("product.ListProductResponse", [
            { no: 1, name: "base", kind: "message", T: () => BaseResponse },
            { no: 2, name: "pagination", kind: "message", T: () => PaginationResponse },
            { no: 3, name: "data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ListProductResponseItem }
        ]);
    }
    create(value?: PartialMessage<ListProductResponse>): ListProductResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = [];
        if (value !== undefined)
            reflectionMergePartial<ListProductResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListProductResponse): ListProductResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.BaseResponse base */ 1:
                    message.base = BaseResponse.internalBinaryRead(reader, reader.uint32(), options, message.base);
                    break;
                case /* common.PaginationResponse pagination */ 2:
                    message.pagination = PaginationResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* repeated product.ListProductResponseItem data */ 3:
                    message.data.push(ListProductResponseItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListProductResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.BaseResponse base = 1; */
        if (message.base)
            BaseResponse.internalBinaryWrite(message.base, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* common.PaginationResponse pagination = 2; */
        if (message.pagination)
            PaginationResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated product.ListProductResponseItem data = 3; */
        for (let i = 0; i < message.data.length; i++)
            ListProductResponseItem.internalBinaryWrite(message.data[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message product.ListProductResponse
 */
export const ListProductResponse = new ListProductResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListProductAdminRequest$Type extends MessageType<ListProductAdminRequest> {
    constructor() {
        super("product.ListProductAdminRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationRequest }
        ]);
    }
    create(value?: PartialMessage<ListProductAdminRequest>): ListProductAdminRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListProductAdminRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListProductAdminRequest): ListProductAdminRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.PaginationRequest pagination */ 1:
                    message.pagination = PaginationRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListProductAdminRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.PaginationRequest pagination = 1; */
        if (message.pagination)
            PaginationRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message product.ListProductAdminRequest
 */
export const ListProductAdminRequest = new ListProductAdminRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListProductAdminResponseItem$Type extends MessageType<ListProductAdminResponseItem> {
    constructor() {
        super("product.ListProductAdminResponseItem", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "price", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "image_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListProductAdminResponseItem>): ListProductAdminResponseItem {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.description = "";
        message.price = 0;
        message.imageUrl = "";
        if (value !== undefined)
            reflectionMergePartial<ListProductAdminResponseItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListProductAdminResponseItem): ListProductAdminResponseItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                case /* double price */ 4:
                    message.price = reader.double();
                    break;
                case /* string image_url */ 5:
                    message.imageUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListProductAdminResponseItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* double price = 4; */
        if (message.price !== 0)
            writer.tag(4, WireType.Bit64).double(message.price);
        /* string image_url = 5; */
        if (message.imageUrl !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.imageUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message product.ListProductAdminResponseItem
 */
export const ListProductAdminResponseItem = new ListProductAdminResponseItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListProductAdminResponse$Type extends MessageType<ListProductAdminResponse> {
    constructor() {
        super("product.ListProductAdminResponse", [
            { no: 1, name: "base", kind: "message", T: () => BaseResponse },
            { no: 2, name: "pagination", kind: "message", T: () => PaginationResponse },
            { no: 3, name: "data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ListProductAdminResponseItem }
        ]);
    }
    create(value?: PartialMessage<ListProductAdminResponse>): ListProductAdminResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = [];
        if (value !== undefined)
            reflectionMergePartial<ListProductAdminResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListProductAdminResponse): ListProductAdminResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.BaseResponse base */ 1:
                    message.base = BaseResponse.internalBinaryRead(reader, reader.uint32(), options, message.base);
                    break;
                case /* common.PaginationResponse pagination */ 2:
                    message.pagination = PaginationResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* repeated product.ListProductAdminResponseItem data */ 3:
                    message.data.push(ListProductAdminResponseItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListProductAdminResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.BaseResponse base = 1; */
        if (message.base)
            BaseResponse.internalBinaryWrite(message.base, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* common.PaginationResponse pagination = 2; */
        if (message.pagination)
            PaginationResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated product.ListProductAdminResponseItem data = 3; */
        for (let i = 0; i < message.data.length; i++)
            ListProductAdminResponseItem.internalBinaryWrite(message.data[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message product.ListProductAdminResponse
 */
export const ListProductAdminResponse = new ListProductAdminResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HighlightProductsRequest$Type extends MessageType<HighlightProductsRequest> {
    constructor() {
        super("product.HighlightProductsRequest", []);
    }
    create(value?: PartialMessage<HighlightProductsRequest>): HighlightProductsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<HighlightProductsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HighlightProductsRequest): HighlightProductsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: HighlightProductsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message product.HighlightProductsRequest
 */
export const HighlightProductsRequest = new HighlightProductsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HighlightProductsResponseItem$Type extends MessageType<HighlightProductsResponseItem> {
    constructor() {
        super("product.HighlightProductsResponseItem", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "price", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "image_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<HighlightProductsResponseItem>): HighlightProductsResponseItem {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.description = "";
        message.price = 0;
        message.imageUrl = "";
        if (value !== undefined)
            reflectionMergePartial<HighlightProductsResponseItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HighlightProductsResponseItem): HighlightProductsResponseItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                case /* double price */ 4:
                    message.price = reader.double();
                    break;
                case /* string image_url */ 5:
                    message.imageUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HighlightProductsResponseItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* double price = 4; */
        if (message.price !== 0)
            writer.tag(4, WireType.Bit64).double(message.price);
        /* string image_url = 5; */
        if (message.imageUrl !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.imageUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message product.HighlightProductsResponseItem
 */
export const HighlightProductsResponseItem = new HighlightProductsResponseItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HighlightProductsResponse$Type extends MessageType<HighlightProductsResponse> {
    constructor() {
        super("product.HighlightProductsResponse", [
            { no: 1, name: "base", kind: "message", T: () => BaseResponse },
            { no: 2, name: "data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HighlightProductsResponseItem }
        ]);
    }
    create(value?: PartialMessage<HighlightProductsResponse>): HighlightProductsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = [];
        if (value !== undefined)
            reflectionMergePartial<HighlightProductsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HighlightProductsResponse): HighlightProductsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.BaseResponse base */ 1:
                    message.base = BaseResponse.internalBinaryRead(reader, reader.uint32(), options, message.base);
                    break;
                case /* repeated product.HighlightProductsResponseItem data */ 2:
                    message.data.push(HighlightProductsResponseItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HighlightProductsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.BaseResponse base = 1; */
        if (message.base)
            BaseResponse.internalBinaryWrite(message.base, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated product.HighlightProductsResponseItem data = 2; */
        for (let i = 0; i < message.data.length; i++)
            HighlightProductsResponseItem.internalBinaryWrite(message.data[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message product.HighlightProductsResponse
 */
export const HighlightProductsResponse = new HighlightProductsResponse$Type();
/**
 * @generated ServiceType for protobuf service product.ProductService
 */
export const ProductService = new ServiceType("product.ProductService", [
    { name: "CreateProduct", options: {}, I: CreateProductRequest, O: CreateProductResponse },
    { name: "DetailProduct", options: {}, I: DetailProductRequest, O: DetailProductResponse },
    { name: "EditProduct", options: {}, I: EditProductRequest, O: EditProductResponse },
    { name: "DeleteProduct", options: {}, I: DeleteProductRequest, O: DeleteProductResponse },
    { name: "ListProduct", options: {}, I: ListProductRequest, O: ListProductResponse },
    { name: "ListProductAdmin", options: {}, I: ListProductAdminRequest, O: ListProductAdminResponse },
    { name: "HighlightProducts", options: {}, I: HighlightProductsRequest, O: HighlightProductsResponse }
]);
